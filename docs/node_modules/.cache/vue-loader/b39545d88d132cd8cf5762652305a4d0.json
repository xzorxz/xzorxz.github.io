{"remainingRequest":"/Users/xiaozhang/学习/就业班学习/vue-实战/hmmm-frontend-dev/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xiaozhang/学习/就业班学习/vue-实战/hmmm-frontend-dev/src/module-manage/components/permissionsApi-add.vue?vue&type=style&index=0&id=4c9f3831&lang=css&","dependencies":[{"path":"/Users/xiaozhang/学习/就业班学习/vue-实战/hmmm-frontend-dev/src/module-manage/components/permissionsApi-add.vue","mtime":1668225793867},{"path":"/Users/xiaozhang/学习/就业班学习/vue-实战/hmmm-frontend-dev/node_modules/css-loader/dist/cjs.js","mtime":1666491586395},{"path":"/Users/xiaozhang/学习/就业班学习/vue-实战/hmmm-frontend-dev/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1666491603796},{"path":"/Users/xiaozhang/学习/就业班学习/vue-实战/hmmm-frontend-dev/node_modules/postcss-loader/src/index.js","mtime":1666491592715},{"path":"/Users/xiaozhang/学习/就业班学习/vue-实战/hmmm-frontend-dev/node_modules/cache-loader/dist/cjs.js","mtime":1666491533034},{"path":"/Users/xiaozhang/学习/就业班学习/vue-实战/hmmm-frontend-dev/node_modules/vue-loader/lib/index.js","mtime":1666491603796}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5lbC10cmVlIHsKICBtYXJnaW4tdG9wOiA4cHg7Cn0KLmVsLXRyZWUtbm9kZV9fY29udGVudCB7CiAgaGVpZ2h0OiBhdXRvOwp9Ci5lbC1mb3JtLS1sYWJlbC1sZWZ0IC5lbC1mb3JtLWl0ZW1fX2xhYmVsIHsKICB0ZXh0LWFsaWduOiByaWdodDsKfQouZWwtZGlhbG9nX19mb290ZXIgewogIHRleHQtYWxpZ246IHJpZ2h0Owp9Cg=="},{"version":3,"sources":["permissionsApi-add.vue"],"names":[],"mappings":";AAwJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"permissionsApi-add.vue","sourceRoot":"src/module-manage/components","sourcesContent":["<template>\n  <div class=\"add-form\">\n    <el-dialog :title=\"apiTitle\" :visible.sync=\"dialogFormVisible\">\n    <el-form :rules=\"ruleInline\" ref=\"dataForm\" :model=\"formBase\" label-position=\"left\" label-width=\"120px\" style='width: 400px; margin-left:120px;'>\n          <el-form-item :label=\"$t('table.powerTitle')\" prop=\"title\">\n            <el-input v-model=\"formBase.title\"></el-input>\n          </el-form-item>\n          <el-form-item  :label=\"$t('table.powerDistriB')\">\n            <el-tree\n              ref=\"treeMenu\"\n              :data=\"treeData\"\n              show-checkbox\n              node-key=\"id\"\n              :default-expanded-keys=\"[0]\"\n              :props=\"defaultProps\" @check-change='handleCheckChange'>\n            </el-tree>\n          </el-form-item>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"handleClose\">{{$t('table.signOut')}}</el-button>\n          <el-button type=\"primary\" @click=\"handleSave('formBase')\">{{$t('table.preserve')}}</el-button>\n        </div>\n  </el-dialog>\n\n  </div>\n</template>\n<script>\nimport { detail, update, add } from '@/api/base/permissions'\nimport { list } from '@/api/base/menus.js'\nlet _this = []\nexport default {\n  name: 'PermissionGroupsApiAdd',\n  props: ['apiTitle', 'ruleInline'],\n  data () {\n    return {\n      dialogFormVisible: false,\n      PermissionGroupsmenu: [],\n      defaultProps: {\n        label: 'title'\n      },\n      formBase: {\n        id: 0,\n        title: '',\n        apis: []\n      },\n      PermissionApiData: [],\n      checkedData: []\n    }\n  },\n  computed: {\n    // 菜单权限树\n    treeData () {\n      const checkedData = this.PermissionApiData\n\n      const checked = false\n      if (_this !== null && _this.formBase.apis.length > 0) {\n        const per = _this.formBase.apis.map(item => {\n          return item\n        })\n        const use = per.map(item => {\n          checkedData.filter(mini => {\n            if (mini.id === item) {\n              mini.checked = true\n            }\n          })\n        })\n      }\n      return checkedData\n    }\n  },\n  methods: {\n    // 逻辑业务\n    // **********************************\n    // **********************************\n    // 弹层显示\n    dialogFormV () {\n      this.dialogFormVisible = true\n    },\n    // 弹层隐藏\n    dialogFormH () {\n      this.dialogFormVisible = false\n    },\n    // 退出\n    handleClose () {\n      this.$emit('handleCloseModal')\n    },\n    // 节点复选框被选中\n    handleCheckChange (nodes) {\n      var checkedData = []\n      checkedData.push(nodes)\n    },\n    // 高级接口数据列表\n    loadApiPermissionData () {\n      list().then((ret, err) => {\n        if (err) {\n          return err\n        }\n        _this.PermissionApiData = ret.data\n      })\n    },\n    // 高级接口表单详情数据加载\n    hanldeEditApiForm (objeditId) {\n      // 获取权限标题\n      this.formBase.id = objeditId\n      details({ id: objeditId }).then((ret, err) => {\n        if (err) {\n          return err\n        }\n        this.formBase.id = ret.data.id\n        this.formBase.title = ret.data.title\n      })\n      _this.loadApiPermissionData()\n      // 读取授权\n      apiread({ id: objeditId }).then((ret, err) => {\n        if (err) {\n          return err\n        }\n        this.formBase.apis = ret.data.apis\n      })\n    },\n    // 表单提交\n    handleSave (object) {\n      const curApis = []\n      for (const it of _this.checkedData) {\n        curApis.push(it.id)\n      }\n      this.$refs[object].validate(valid => {\n        if (valid) {\n          this.$emit('handleCloseModal')\n          apiadd({ id: _this.formBase.id, apis: curApis }).then((ret, err) => {\n            if (err) {\n              return err\n            }\n            this.$emit('newDataes', this.formBase)\n          })\n        } else {\n          this.$Message.error('*号为必填项!')\n        }\n      })\n    }\n  },\n  // 挂载结束\n  mounted: function () {},\n  // 创建完毕状态\n  created () {\n    _this = this\n  },\n  // 组件更新\n  updated: function () {}\n}\n</script>\n<style>\n.el-tree {\n  margin-top: 8px;\n}\n.el-tree-node__content {\n  height: auto;\n}\n.el-form--label-left .el-form-item__label {\n  text-align: right;\n}\n.el-dialog__footer {\n  text-align: right;\n}\n</style>\n"]}]}